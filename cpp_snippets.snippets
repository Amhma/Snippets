
# class
snippet cl
	class ${1:`vim_snippets#Filename('$1', 'name')`}
	{
		public:

			$1( void );
			$1( const $1 & rhs );

			~$1( void );

			$1 &	operator=( const $1 & rhs );

			/*type*/	get/*attribut*/( void ) const;
			void		set/*attribut*/( const /*data*/ );

		private:

			${0:/* data */}
	};

snippet mmfun
	#include "${1:`vim_snippets#Filename('$1', 'ClassName')`}.hpp"

	$1::$1( void )
	{
		std::cout << "$1 Default Constructor" << std::endl;
	}

	$1::$1( const $1 & rhs )
	{
		std::cout << "$1 copy Constructor" << std::endl;
		*this = rhs;
	}

	$1::~$1( void )
	{
		std::cout << "$1 Default Destructor" << std::endl;
	}

	$1 &	$1::operator=( const $1 & rhs )
	{
		if ( this != &rhs )
		{
		}
		return ( *this );
	}

	/*type*/	$1::get/*attribut*/( void ) const
	{
		return ( this->/*attribut*/ );
	}

	void		$1::set/*attribut*/( /*data*/ )
	{
		/*data*/
	}
# ifndef
snippet ifn
	#ifndef ${0:data}
	# define $0

	#endif
# others
snippet {
	{
		${0:data ...}
	}
snippet (
	(${0:data})
snippet [
	[${0:index}]
snippet mfu
	${1:type}	${2:`vim_snippets#Filename('$1', 'ClassName')`}::${3:name}( ${4:data} )
	{
	}

